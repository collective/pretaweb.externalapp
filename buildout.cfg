# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi 
# ... just reach by the recipe name
[buildout]
parts =
    mod-wsgi
    instance
    wsgi-conf
    zopepy
    i18ndude
    paster
    zopeskel
    test
    omelette
    gunicorn
    wsgiproxy
    proxypaster

extends = 
    http://dist.plone.org/release/4.2.5/versions.cfg
    
# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.2.5
    http://dist.plone.org/thirdparty

extensions = 
    mr.developer
#    buildout.dumppickedversions

sources = sources
    
versions = versions

# Reference any folders where you have Python egg source code under development here 
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a 
# repository mr.developer will handle this automatically for you
develop =
  .

auto-checkout =
#    pretaweb.externalapp
    WSGIProxy



[wsgiproxy]
recipe = collective.recipe.template
output = ${buildout:parts-directory}/wsgiproxy.ini
input = inline:
          [server:main]
#          use = egg:gunicorn#main
          use = egg:paste#http
          host = 0.0.0.0
          port = 8090
#          worker_class=gevent

          [pipeline:main]
          pipeline = egg:pretaweb.externalapp#external_app rproxy

          [app:restkit]
          use = egg:restkit#host_proxy
          uri = http://www.google.com.au
          #reskit has an issue with this url http://localhost:8080/logos/2013/hitchhikers/hhgg.jpg
          #and some zope requests

          [app:rproxy]
          use = egg:restkit#host_proxy
          uri = http://localhost:8080

          [app:proxy]
          use = egg:pretaweb.externalapp#wsgiproxy
          href = http://localhost:8080

[gunicorn]
recipe = zc.recipe.egg
eggs =
 ${gevent:egg}
  gunicorn
  PasteDeploy
  PasteScript
  Paste
  restkit
  pretaweb.externalapp
  WSGIProxy
dependent-scripts = true
scripts=
  paster=wsgiproxy_paster
  gunicorn
  gunicorn_paster
interpreter=pygunicorn
entry-points = wsgiproxy_paster=paste.script.command:run


[proxypaster]
recipe = zc.recipe.egg
eggs =
   ZopeSkel
   PasteScript
   PasteDeploy
   zopeskel.dexterity
  restkit
  pretaweb.externalapp
  WSGIProxy
entry-points = proxypaster=paste.script.command:run


[gevent]
recipe = zc.recipe.egg:custom
egg=gevent >= 1.0rc2
include = ${libev:location}
include-dirs = ${libev:location}/include
library-dirs = ${libev:location}/lib
rpath = ${libev:location}/lib

[libev]
recipe = zc.recipe.cmmi
#url = http://dist.schmorp.de/libev/Attic/libev-4.11.tar.gz
url = http://dist.schmorp.de/libev/libev-4.15.tar.gz



# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
debug-mode = on
verbose-security = on
blob-storage = var/blobstorage

eggs =
    PIL
    Plone
    pretaweb.externalapp
    plone.reload
    PasteScript
    Paste
    WebError
#    repoze.retry
#    repoze.tm2
#    repoze.vhm
#    WSGIProxy
    plone.app.theming >= 1.1dev

scripts = paster

# Some pre-Plone 3.3 packages may need you to register the package name here in 
# order their configure.zcml to be run (http://plone.org/products/plone/roadmap/247)
# - this is never required for packages in the Products namespace (Products.*)
zcml =
    plone.reload




# zopepy commands allows you to execute Python scripts using a PYTHONPATH 
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    ${instance:eggs}

# create paster command with Dexterity support
[paster]
recipe = zc.recipe.egg
eggs =
   ZopeSkel
   PasteScript
   PasteDeploy
   zopeskel.dexterity
   ${instance:eggs}
entry-points = paster=paste.script.command:run


# create ZopeSkel command
[zopeskel]
unzip = true
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    ${instance:eggs}

# symlinks all Python source code to parts/omelette folder when buildout is run
# windows users will need to install additional software for this part to build 
# correctly.  See http://pypi.python.org/pypi/collective.recipe.omelette for
# relevant details.
[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on format for this part
[sources]
collective.developermanual = svn http://svn.plone.org/svn/collective/collective.developermanual
pretaweb.externalapp = git git@repos.pretaweb.com:pretaweb.externalapp
WSGIProxy = git git@github.com:vipod/WSGIProxy.git

# Version pindowns for new style products go here - this section extends one provided in http://dist.plone.org/release/
[versions]
ZopeSkel=2.21.2
plone.app.theming = 1.1b2

[mod-wsgi]
recipe = collective.recipe.modwsgi
eggs = ${instance:eggs}
config-file = plone.ini

[wsgi-conf]
recipe = collective.recipe.template
input = plone.ini.in
output = plone.ini
